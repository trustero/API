// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: receptor_v1/receptor.proto

package receptor_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
//A finding is a set of evidence(s) collected from a service provider account.
type Finding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Unique receptor identifier.  A receptor is expected to report findings from only one service provider type.  A
	//stable identifier that represent the type of receptor reporting this finding.  The identifier is akin to a fully
	//qualified Go package name or a Java class name.  For example, "github.com/trustero/receptor/gitlab".
	//REMIND maps to Receptor.ModelID
	ReceptorType string `protobuf:"bytes,1,opt,name=receptor_type,json=receptorType,proto3" json:"receptor_type,omitempty"`
	//*
	//The receptor's evidence source.
	//REMIND maps to Receptor.TenantID
	ServiceProviderAccount string `protobuf:"bytes,2,opt,name=service_provider_account,json=serviceProviderAccount,proto3" json:"service_provider_account,omitempty"`
	//*
	//One or more evidence collected by a typical receptor scan.
	Evidences []*Evidence `protobuf:"bytes,3,rep,name=evidences,proto3" json:"evidences,omitempty"`
}

func (x *Finding) Reset() {
	*x = Finding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finding) ProtoMessage() {}

func (x *Finding) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finding.ProtoReflect.Descriptor instead.
func (*Finding) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{0}
}

func (x *Finding) GetReceptorType() string {
	if x != nil {
		return x.ReceptorType
	}
	return ""
}

func (x *Finding) GetServiceProviderAccount() string {
	if x != nil {
		return x.ServiceProviderAccount
	}
	return ""
}

func (x *Finding) GetEvidences() []*Evidence {
	if x != nil {
		return x.Evidences
	}
	return nil
}

//*
//An evidence is a unstructured or structured document that represent the how a service is being used within a
//service provider account.  For example, the configuration of an S3 bucket in AWS.
type Evidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Human readable English string that identifies this evidence.  It's important the caption is stable for all
	//scans of the same evidence type.
	Caption string `protobuf:"bytes,1,opt,name=caption,proto3" json:"caption,omitempty"`
	//*
	//Human readable English string describing the content of this evidence.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	//*
	//The name of service this evidence was collected from.  For example, "S3".  The service name must be one
	//of the service types reported in Services struct (See the message Service definition).
	ServiceName string `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	//*
	//The raw API request used to generate this evidence.  The raw API request and response are used to prove to
	//examiners this evidence correlates to real service instance configuration.
	Sources []*Evidence_Source `protobuf:"bytes,4,rep,name=sources,proto3" json:"sources,omitempty"`
	//*
	//The evidence can be an unstructured (Document) or structured (Struct) type.
	//
	// Types that are assignable to EvidenceType:
	//	*Evidence_Doc
	//	*Evidence_Struct
	EvidenceType isEvidence_EvidenceType `protobuf_oneof:"evidence_type"`
}

func (x *Evidence) Reset() {
	*x = Evidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Evidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evidence) ProtoMessage() {}

func (x *Evidence) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evidence.ProtoReflect.Descriptor instead.
func (*Evidence) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{1}
}

func (x *Evidence) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

func (x *Evidence) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Evidence) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Evidence) GetSources() []*Evidence_Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (m *Evidence) GetEvidenceType() isEvidence_EvidenceType {
	if m != nil {
		return m.EvidenceType
	}
	return nil
}

func (x *Evidence) GetDoc() *Document {
	if x, ok := x.GetEvidenceType().(*Evidence_Doc); ok {
		return x.Doc
	}
	return nil
}

func (x *Evidence) GetStruct() *Struct {
	if x, ok := x.GetEvidenceType().(*Evidence_Struct); ok {
		return x.Struct
	}
	return nil
}

type isEvidence_EvidenceType interface {
	isEvidence_EvidenceType()
}

type Evidence_Doc struct {
	//*
	//An unstructured evidence.
	Doc *Document `protobuf:"bytes,6,opt,name=doc,proto3,oneof"`
}

type Evidence_Struct struct {
	//*
	//A structured evidence
	Struct *Struct `protobuf:"bytes,7,opt,name=struct,proto3,oneof"`
}

func (*Evidence_Doc) isEvidence_EvidenceType() {}

func (*Evidence_Struct) isEvidence_EvidenceType() {}

//*
//An unstructured evidence provided as a MIME document.
type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//A unique service ID relative to the document.  A row ID typically represents a unique service ID.  The
	//service_id must be previously reported in the Services message.
	//@required
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	//*
	//Document type defined using MIME (https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types).
	//@required
	Mime string `protobuf:"bytes,2,opt,name=mime,proto3" json:"mime,omitempty"`
	//*
	//Opaque document body.  The document body must match the type defined by the mime attribute.
	//@required
	Body []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{2}
}

func (x *Document) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Document) GetMime() string {
	if x != nil {
		return x.Mime
	}
	return ""
}

func (x *Document) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

//*
//A structured evidence defined in tabular form.  Each struct typically represent a service type (see Evidence
//message definition).  Each struct consists of rows of data.  Each row typically represent a service instance and
//its configurations.  A row  contains column name and column value pairs.  All rows in a struct must have the same
//column name-value pairs.
type Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Each row typically represents the configuration of a service instance.
	//@required
	Rows []*Struct_Row `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	//*
	//A map of row column name to display name pairs.
	//@required
	ColDisplayNames map[string]string `protobuf:"bytes,2,rep,name=col_display_names,json=colDisplayNames,proto3" json:"col_display_names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//*
	//An ordered list of row column names.  The order defines how each column will be rendered by default.
	//@required
	ColDisplayOrder []string `protobuf:"bytes,3,rep,name=col_display_order,json=colDisplayOrder,proto3" json:"col_display_order,omitempty"`
}

func (x *Struct) Reset() {
	*x = Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct) ProtoMessage() {}

func (x *Struct) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct.ProtoReflect.Descriptor instead.
func (*Struct) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{3}
}

func (x *Struct) GetRows() []*Struct_Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *Struct) GetColDisplayNames() map[string]string {
	if x != nil {
		return x.ColDisplayNames
	}
	return nil
}

func (x *Struct) GetColDisplayOrder() []string {
	if x != nil {
		return x.ColDisplayOrder
	}
	return nil
}

//*
//Service instances configured within a service provider account.  For example, all service instances configured in
//an AWS account which may include S3 buckets, ECS clusters, RDS database instances, etc.  The boundary of a
//service instance such as a ECS cluster or an ECS container instance is dependent on how the findings are
//collected.  Each service instance_id should be associated with at least one Evidence.
type Services struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Unique receptor type.  A stable string identifier that represent the type of receptor reporting this finding.  The
	//identifier is akin to a fully qualified Go package name or a Java class name.  For example,
	//"github.com/trustero/receptor/gitlab".
	//@required
	ReceptorType string `protobuf:"bytes,1,opt,name=receptor_type,json=receptorType,proto3" json:"receptor_type,omitempty"`
	//*
	//The service provider of this list of services.
	//@required
	ServiceProviderAccount string `protobuf:"bytes,2,opt,name=service_provider_account,json=serviceProviderAccount,proto3" json:"service_provider_account,omitempty"`
	//*
	//A list of service instances.
	//@required
	Services []*Services_Service `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *Services) Reset() {
	*x = Services{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Services) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Services) ProtoMessage() {}

func (x *Services) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Services.ProtoReflect.Descriptor instead.
func (*Services) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{4}
}

func (x *Services) GetReceptorType() string {
	if x != nil {
		return x.ReceptorType
	}
	return ""
}

func (x *Services) GetServiceProviderAccount() string {
	if x != nil {
		return x.ServiceProviderAccount
	}
	return ""
}

func (x *Services) GetServices() []*Services_Service {
	if x != nil {
		return x.Services
	}
	return nil
}

//*
//Credential to access a service provider account.
//REMIND:  Credential maps to receptor.VerifyResult record with the addition of credential being verified.
type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Trustero's receptor record identifier.  This identifier is typically provided to the receptor as part of a reporting
	//findings or discover services request.
	ReceptorObjectId string `protobuf:"bytes,1,opt,name=receptor_object_id,json=receptorObjectId,proto3" json:"receptor_object_id,omitempty"`
	//*
	//The service provider credential being verified.
	Credential map[string]string `protobuf:"bytes,2,rep,name=credential,proto3" json:"credential,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//*
	//Report whether the service provider credential provided in this message is valid for report findings or discover
	//services request.
	IsCredentialValid bool `protobuf:"varint,3,opt,name=is_credential_valid,json=isCredentialValid,proto3" json:"is_credential_valid,omitempty"`
	//*
	//Reason for why the service provider credential in this message is invalid.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{5}
}

func (x *Credential) GetReceptorObjectId() string {
	if x != nil {
		return x.ReceptorObjectId
	}
	return ""
}

func (x *Credential) GetCredential() map[string]string {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *Credential) GetIsCredentialValid() bool {
	if x != nil {
		return x.IsCredentialValid
	}
	return false
}

func (x *Credential) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//*
//Trustero receptor record identifier.
type ReceptorOID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Trustero string representation of a persistent record.
	ReceptorObjectId string `protobuf:"bytes,1,opt,name=receptor_object_id,json=receptorObjectId,proto3" json:"receptor_object_id,omitempty"`
}

func (x *ReceptorOID) Reset() {
	*x = ReceptorOID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceptorOID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceptorOID) ProtoMessage() {}

func (x *ReceptorOID) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceptorOID.ProtoReflect.Descriptor instead.
func (*ReceptorOID) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{6}
}

func (x *ReceptorOID) GetReceptorObjectId() string {
	if x != nil {
		return x.ReceptorObjectId
	}
	return ""
}

//*
//Trustero stored receptor configuration and service provider credential.
//REMIND: ReceptorConfiguration is a subset of existing ntrced's Receptor record.
type ReceptorConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Trustero receptor record identifier.
	//REMIND Receptor.ID
	ReceptorObjectId string `protobuf:"bytes,1,opt,name=receptor_object_id,json=receptorObjectId,proto3" json:"receptor_object_id,omitempty"`
	//*
	//Credential required to access a service provider for report finding and discover services purposes.
	//REMIND Receptor.Credential required to access the target service.
	Credential string `protobuf:"bytes,2,opt,name=credential,proto3" json:"credential,omitempty"`
	//*
	//Additional receptor configuration to access a service provider account.
	//REMIND Receptor.config task configuration in json.
	Config string `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	//*
	//Service provider account
	//REMIND Receptor.TenantID
	ServiceProviderAccount string `protobuf:"bytes,4,opt,name=service_provider_account,json=serviceProviderAccount,proto3" json:"service_provider_account,omitempty"`
}

func (x *ReceptorConfiguration) Reset() {
	*x = ReceptorConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceptorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceptorConfiguration) ProtoMessage() {}

func (x *ReceptorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceptorConfiguration.ProtoReflect.Descriptor instead.
func (*ReceptorConfiguration) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{7}
}

func (x *ReceptorConfiguration) GetReceptorObjectId() string {
	if x != nil {
		return x.ReceptorObjectId
	}
	return ""
}

func (x *ReceptorConfiguration) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *ReceptorConfiguration) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *ReceptorConfiguration) GetServiceProviderAccount() string {
	if x != nil {
		return x.ServiceProviderAccount
	}
	return ""
}

//*
//Trustero uses asynchronous jobs to track receptor requests.  Trustero initiates a receptor job providing a
//receptor_object_id, a tracer_id, and a command.  When the receptor completes the job, the receptor callback
//into Trustero to report the job result.
//REMIND:  JobResult maps to AsyncTask
type JobResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//A tracer ID used to track the progress of the receptor request.
	//REMIND AyncTask.TracerID for tracking.
	TracerId string `protobuf:"bytes,1,opt,name=tracer_id,json=tracerId,proto3" json:"tracer_id,omitempty"`
	//*
	//Receptor command request that completed.  One of "verify", "scan", or "discover"
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	//*
	//Receptor command request result.  One of "success", "fail", or "error".
	Result string `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	//*
	//Trustero's receptor record identifier.
	//REMIND Receptor.ID
	ReceptorObjectId string `protobuf:"bytes,4,opt,name=receptor_object_id,json=receptorObjectId,proto3" json:"receptor_object_id,omitempty"`
}

func (x *JobResult) Reset() {
	*x = JobResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResult) ProtoMessage() {}

func (x *JobResult) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResult.ProtoReflect.Descriptor instead.
func (*JobResult) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{8}
}

func (x *JobResult) GetTracerId() string {
	if x != nil {
		return x.TracerId
	}
	return ""
}

func (x *JobResult) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *JobResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *JobResult) GetReceptorObjectId() string {
	if x != nil {
		return x.ReceptorObjectId
	}
	return ""
}

type Evidence_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//The raw API request used to generate this evidence.  The raw API request and response are used to prove to
	//examiners this evidence correlates to real service instance configuration.
	RawApiRequest string `protobuf:"bytes,1,opt,name=raw_api_request,json=rawApiRequest,proto3" json:"raw_api_request,omitempty"`
	//*
	//The raw API response used to generate this evidence.  The raw API request and response is used to prove to
	//examiners this evidence correlates to real service instance configuration.
	RawApiResponse string `protobuf:"bytes,2,opt,name=raw_api_response,json=rawApiResponse,proto3" json:"raw_api_response,omitempty"`
}

func (x *Evidence_Source) Reset() {
	*x = Evidence_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Evidence_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evidence_Source) ProtoMessage() {}

func (x *Evidence_Source) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evidence_Source.ProtoReflect.Descriptor instead.
func (*Evidence_Source) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Evidence_Source) GetRawApiRequest() string {
	if x != nil {
		return x.RawApiRequest
	}
	return ""
}

func (x *Evidence_Source) GetRawApiResponse() string {
	if x != nil {
		return x.RawApiResponse
	}
	return ""
}

//*
//A row of structured data
type Struct_Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//A unique service ID relative to the struct.  A row ID typically represents a unique service ID.  The
	//service_id must be previously reported in the Services message.
	//@required
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	//*
	//Columns of the row in column name to value pairs.  All rows in a struct must have the same column names and
	//corresponding value types.
	//@required
	Cols map[string]*Struct_Row_Value `protobuf:"bytes,2,rep,name=cols,proto3" json:"cols,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Struct_Row) Reset() {
	*x = Struct_Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct_Row) ProtoMessage() {}

func (x *Struct_Row) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct_Row.ProtoReflect.Descriptor instead.
func (*Struct_Row) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Struct_Row) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Struct_Row) GetCols() map[string]*Struct_Row_Value {
	if x != nil {
		return x.Cols
	}
	return nil
}

//*
//Column value types can be any protobuf scalar or google.proto.Timestamp.
//@required
type Struct_Row_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ValueType:
	//	*Struct_Row_Value_DoubleValue
	//	*Struct_Row_Value_FloatValue
	//	*Struct_Row_Value_Int32Value
	//	*Struct_Row_Value_Int64Value
	//	*Struct_Row_Value_Uint32Value
	//	*Struct_Row_Value_Uint64Value
	//	*Struct_Row_Value_BoolValue
	//	*Struct_Row_Value_StringValue
	//	*Struct_Row_Value_TimestampValue
	ValueType isStruct_Row_Value_ValueType `protobuf_oneof:"value_type"`
}

func (x *Struct_Row_Value) Reset() {
	*x = Struct_Row_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct_Row_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct_Row_Value) ProtoMessage() {}

func (x *Struct_Row_Value) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct_Row_Value.ProtoReflect.Descriptor instead.
func (*Struct_Row_Value) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{3, 1, 1}
}

func (m *Struct_Row_Value) GetValueType() isStruct_Row_Value_ValueType {
	if m != nil {
		return m.ValueType
	}
	return nil
}

func (x *Struct_Row_Value) GetDoubleValue() float64 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Struct_Row_Value) GetFloatValue() float32 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Struct_Row_Value) GetInt32Value() int32 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *Struct_Row_Value) GetInt64Value() int64 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *Struct_Row_Value) GetUint32Value() uint32 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *Struct_Row_Value) GetUint64Value() uint64 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *Struct_Row_Value) GetBoolValue() bool {
	if x, ok := x.GetValueType().(*Struct_Row_Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Struct_Row_Value) GetStringValue() string {
	if x, ok := x.GetValueType().(*Struct_Row_Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Struct_Row_Value) GetTimestampValue() *timestamppb.Timestamp {
	if x, ok := x.GetValueType().(*Struct_Row_Value_TimestampValue); ok {
		return x.TimestampValue
	}
	return nil
}

type isStruct_Row_Value_ValueType interface {
	isStruct_Row_Value_ValueType()
}

type Struct_Row_Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Struct_Row_Value_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type Struct_Row_Value_Int32Value struct {
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type Struct_Row_Value_Int64Value struct {
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Struct_Row_Value_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type Struct_Row_Value_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type Struct_Row_Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,7,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Struct_Row_Value_StringValue struct {
	StringValue string `protobuf:"bytes,8,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Struct_Row_Value_TimestampValue struct {
	TimestampValue *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=timestamp_value,json=timestampValue,proto3,oneof"`
}

func (*Struct_Row_Value_DoubleValue) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_FloatValue) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Int32Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Int64Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Uint32Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Uint64Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_BoolValue) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_StringValue) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_TimestampValue) isStruct_Row_Value_ValueType() {}

//*
//A service instance definition.
type Services_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Name of the service.  For example, "ECS".
	//@required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//*
	//Unique service ID.  For example, ECS's UUID.
	//@required
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *Services_Service) Reset() {
	*x = Services_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Services_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Services_Service) ProtoMessage() {}

func (x *Services_Service) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Services_Service.ProtoReflect.Descriptor instead.
func (*Services_Service) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Services_Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Services_Service) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

var File_receptor_v1_receptor_proto protoreflect.FileDescriptor

var file_receptor_v1_receptor_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x01, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x70, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72,
	0x5f, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x65, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xe8, 0x02, 0x0a, 0x08, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x64,
	0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f,
	0x72, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x5a, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x61, 0x77, 0x41, 0x70, 0x69,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x61, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x51, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x69, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xae, 0x06, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x54, 0x0a,
	0x11, 0x63, 0x6f, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x43, 0x6f,
	0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x63, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a,
	0x42, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xb0, 0x04, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x63, 0x6f,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x52, 0x6f,
	0x77, 0x2e, 0x43, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x63, 0x6f, 0x6c,
	0x73, 0x1a, 0x56, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x52, 0x6f, 0x77, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xfa, 0x02, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0b,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x70, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x3e, 0x0a,
	0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x8c, 0x02,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12,
	0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74,
	0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x69, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x3d, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x0b,
	0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x4f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f,
	0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x15, 0x52, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x32, 0xd4,
	0x02, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x17, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74,
	0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x72,
	0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x70,
	0x74, 0x6f, 0x72, 0x4f, 0x49, 0x44, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f,
	0x72, 0x5f, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a,
	0x06, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74,
	0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x16, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72,
	0x5f, 0x76, 0x31, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_receptor_v1_receptor_proto_rawDescOnce sync.Once
	file_receptor_v1_receptor_proto_rawDescData = file_receptor_v1_receptor_proto_rawDesc
)

func file_receptor_v1_receptor_proto_rawDescGZIP() []byte {
	file_receptor_v1_receptor_proto_rawDescOnce.Do(func() {
		file_receptor_v1_receptor_proto_rawDescData = protoimpl.X.CompressGZIP(file_receptor_v1_receptor_proto_rawDescData)
	})
	return file_receptor_v1_receptor_proto_rawDescData
}

var file_receptor_v1_receptor_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_receptor_v1_receptor_proto_goTypes = []interface{}{
	(*Finding)(nil),                // 0: receptor_v1.Finding
	(*Evidence)(nil),               // 1: receptor_v1.Evidence
	(*Document)(nil),               // 2: receptor_v1.Document
	(*Struct)(nil),                 // 3: receptor_v1.Struct
	(*Services)(nil),               // 4: receptor_v1.Services
	(*Credential)(nil),             // 5: receptor_v1.Credential
	(*ReceptorOID)(nil),            // 6: receptor_v1.ReceptorOID
	(*ReceptorConfiguration)(nil),  // 7: receptor_v1.ReceptorConfiguration
	(*JobResult)(nil),              // 8: receptor_v1.JobResult
	(*Evidence_Source)(nil),        // 9: receptor_v1.Evidence.Source
	nil,                            // 10: receptor_v1.Struct.ColDisplayNamesEntry
	(*Struct_Row)(nil),             // 11: receptor_v1.Struct.Row
	nil,                            // 12: receptor_v1.Struct.Row.ColsEntry
	(*Struct_Row_Value)(nil),       // 13: receptor_v1.Struct.Row.Value
	(*Services_Service)(nil),       // 14: receptor_v1.Services.Service
	nil,                            // 15: receptor_v1.Credential.CredentialEntry
	(*timestamppb.Timestamp)(nil),  // 16: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),          // 17: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil), // 18: google.protobuf.StringValue
}
var file_receptor_v1_receptor_proto_depIdxs = []int32{
	1,  // 0: receptor_v1.Finding.evidences:type_name -> receptor_v1.Evidence
	9,  // 1: receptor_v1.Evidence.sources:type_name -> receptor_v1.Evidence.Source
	2,  // 2: receptor_v1.Evidence.doc:type_name -> receptor_v1.Document
	3,  // 3: receptor_v1.Evidence.struct:type_name -> receptor_v1.Struct
	11, // 4: receptor_v1.Struct.rows:type_name -> receptor_v1.Struct.Row
	10, // 5: receptor_v1.Struct.col_display_names:type_name -> receptor_v1.Struct.ColDisplayNamesEntry
	14, // 6: receptor_v1.Services.services:type_name -> receptor_v1.Services.Service
	15, // 7: receptor_v1.Credential.credential:type_name -> receptor_v1.Credential.CredentialEntry
	12, // 8: receptor_v1.Struct.Row.cols:type_name -> receptor_v1.Struct.Row.ColsEntry
	13, // 9: receptor_v1.Struct.Row.ColsEntry.value:type_name -> receptor_v1.Struct.Row.Value
	16, // 10: receptor_v1.Struct.Row.Value.timestamp_value:type_name -> google.protobuf.Timestamp
	5,  // 11: receptor_v1.Receptor.Verified:input_type -> receptor_v1.Credential
	6,  // 12: receptor_v1.Receptor.GetConfiguration:input_type -> receptor_v1.ReceptorOID
	4,  // 13: receptor_v1.Receptor.Discovered:input_type -> receptor_v1.Services
	0,  // 14: receptor_v1.Receptor.Report:input_type -> receptor_v1.Finding
	8,  // 15: receptor_v1.Receptor.Notify:input_type -> receptor_v1.JobResult
	17, // 16: receptor_v1.Receptor.Verified:output_type -> google.protobuf.Empty
	7,  // 17: receptor_v1.Receptor.GetConfiguration:output_type -> receptor_v1.ReceptorConfiguration
	18, // 18: receptor_v1.Receptor.Discovered:output_type -> google.protobuf.StringValue
	18, // 19: receptor_v1.Receptor.Report:output_type -> google.protobuf.StringValue
	17, // 20: receptor_v1.Receptor.Notify:output_type -> google.protobuf.Empty
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_receptor_v1_receptor_proto_init() }
func file_receptor_v1_receptor_proto_init() {
	if File_receptor_v1_receptor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_receptor_v1_receptor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Finding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Evidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Services); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceptorOID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceptorConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Evidence_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Struct_Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Struct_Row_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Services_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_receptor_v1_receptor_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Evidence_Doc)(nil),
		(*Evidence_Struct)(nil),
	}
	file_receptor_v1_receptor_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Struct_Row_Value_DoubleValue)(nil),
		(*Struct_Row_Value_FloatValue)(nil),
		(*Struct_Row_Value_Int32Value)(nil),
		(*Struct_Row_Value_Int64Value)(nil),
		(*Struct_Row_Value_Uint32Value)(nil),
		(*Struct_Row_Value_Uint64Value)(nil),
		(*Struct_Row_Value_BoolValue)(nil),
		(*Struct_Row_Value_StringValue)(nil),
		(*Struct_Row_Value_TimestampValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_receptor_v1_receptor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_receptor_v1_receptor_proto_goTypes,
		DependencyIndexes: file_receptor_v1_receptor_proto_depIdxs,
		MessageInfos:      file_receptor_v1_receptor_proto_msgTypes,
	}.Build()
	File_receptor_v1_receptor_proto = out.File
	file_receptor_v1_receptor_proto_rawDesc = nil
	file_receptor_v1_receptor_proto_goTypes = nil
	file_receptor_v1_receptor_proto_depIdxs = nil
}
