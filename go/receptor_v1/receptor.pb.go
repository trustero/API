// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: receptor_v1/receptor.proto

package receptor_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
//Service instances configured within a service provider account.  For example, all service instances configured in
//an AWS account which may include S3 buckets, ECS clusters, RDS database instances, etc.  The boundary of a
//service instance such as a ECS cluster or an ECS container instance is dependent on how the findings are
//collected.  Each service instance_id should be associated with at least one Evidence.
type Services struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Unique receptor type.  A stable string identifier that represent the type of receptor reporting this finding.  The
	//identifier is akin to a fully qualified Go package name or a Java class name.  For example,
	//"github.com/trustero/receptor/gitlab".
	//@required
	ReceptorType string `protobuf:"bytes,1,opt,name=receptor_type,json=receptorType,proto3" json:"receptor_type,omitempty"`
	//*
	//The service provider of this list of services.
	//@required
	ServiceProviderAccount string `protobuf:"bytes,2,opt,name=service_provider_account,json=serviceProviderAccount,proto3" json:"service_provider_account,omitempty"`
	//*
	//A list of service instances.
	//@required
	Services []*Services_Service `protobuf:"bytes,3,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *Services) Reset() {
	*x = Services{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Services) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Services) ProtoMessage() {}

func (x *Services) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Services.ProtoReflect.Descriptor instead.
func (*Services) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{0}
}

func (x *Services) GetReceptorType() string {
	if x != nil {
		return x.ReceptorType
	}
	return ""
}

func (x *Services) GetServiceProviderAccount() string {
	if x != nil {
		return x.ServiceProviderAccount
	}
	return ""
}

func (x *Services) GetServices() []*Services_Service {
	if x != nil {
		return x.Services
	}
	return nil
}

//*
//Credential to access a service provider account.
//REMIND:  Credential maps to receptor.VerifyResult record with the addition of credential being verified.
type Credential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Trustero's receptor record identifier.  This identifier is typically provided to the receptor as part of a reporting
	//findings or discover services request.
	ReceptorObjectId string `protobuf:"bytes,1,opt,name=receptor_object_id,json=receptorObjectId,proto3" json:"receptor_object_id,omitempty"`
	//*
	//The service provider credential being verified.
	Credential map[string]string `protobuf:"bytes,2,rep,name=credential,proto3" json:"credential,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//*
	//Report whether the service provider credential provided in this message is valid for report findings or discover
	//services request.
	IsCredentialValid bool `protobuf:"varint,3,opt,name=is_credential_valid,json=isCredentialValid,proto3" json:"is_credential_valid,omitempty"`
	//*
	//Reason for why the service provider credential in this message is invalid.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Credential) Reset() {
	*x = Credential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{1}
}

func (x *Credential) GetReceptorObjectId() string {
	if x != nil {
		return x.ReceptorObjectId
	}
	return ""
}

func (x *Credential) GetCredential() map[string]string {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *Credential) GetIsCredentialValid() bool {
	if x != nil {
		return x.IsCredentialValid
	}
	return false
}

func (x *Credential) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

//*
//Trustero receptor record identifier.
type ReceptorOID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Trustero string representation of a persistent record.
	ReceptorObjectId string `protobuf:"bytes,1,opt,name=receptor_object_id,json=receptorObjectId,proto3" json:"receptor_object_id,omitempty"`
}

func (x *ReceptorOID) Reset() {
	*x = ReceptorOID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceptorOID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceptorOID) ProtoMessage() {}

func (x *ReceptorOID) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceptorOID.ProtoReflect.Descriptor instead.
func (*ReceptorOID) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{2}
}

func (x *ReceptorOID) GetReceptorObjectId() string {
	if x != nil {
		return x.ReceptorObjectId
	}
	return ""
}

//*
//Trustero stored receptor configuration and service provider credential.
//REMIND: ReceptorConfiguration is a subset of existing ntrced's Receptor record.
type ReceptorConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Trustero receptor record identifier.
	//REMIND Receptor.ID
	ReceptorObjectId string `protobuf:"bytes,1,opt,name=receptor_object_id,json=receptorObjectId,proto3" json:"receptor_object_id,omitempty"`
	//*
	//Credential required to access a service provider for report finding and discover services purposes.
	//REMIND Receptor.Credential required to access the target service.
	Credential string `protobuf:"bytes,2,opt,name=credential,proto3" json:"credential,omitempty"`
	//*
	//Additional receptor configuration to access a service provider account.
	//REMIND Receptor.config task configuration in json.
	Config string `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	//*
	//Service provider account
	//REMIND Receptor.TenantID
	ServiceProviderAccount string `protobuf:"bytes,4,opt,name=service_provider_account,json=serviceProviderAccount,proto3" json:"service_provider_account,omitempty"`
}

func (x *ReceptorConfiguration) Reset() {
	*x = ReceptorConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceptorConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceptorConfiguration) ProtoMessage() {}

func (x *ReceptorConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceptorConfiguration.ProtoReflect.Descriptor instead.
func (*ReceptorConfiguration) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{3}
}

func (x *ReceptorConfiguration) GetReceptorObjectId() string {
	if x != nil {
		return x.ReceptorObjectId
	}
	return ""
}

func (x *ReceptorConfiguration) GetCredential() string {
	if x != nil {
		return x.Credential
	}
	return ""
}

func (x *ReceptorConfiguration) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *ReceptorConfiguration) GetServiceProviderAccount() string {
	if x != nil {
		return x.ServiceProviderAccount
	}
	return ""
}

//*
//Trustero uses asynchronous jobs to track receptor requests.  Trustero initiates a receptor job providing a
//receptor_object_id, a tracer_id, and a command.  When the receptor completes the job, the receptor callback
//into Trustero to report the job result.
//REMIND:  JobResult maps to AsyncTask
type JobResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//A tracer ID used to track the progress of the receptor request.
	//REMIND AyncTask.TracerID for tracking.
	TracerId string `protobuf:"bytes,1,opt,name=tracer_id,json=tracerId,proto3" json:"tracer_id,omitempty"`
	//*
	//Receptor command request that completed.  One of "verify", "scan", or "discover"
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	//*
	//Receptor command request result.  One of "success", "fail", or "error".
	Result string `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	//*
	//Trustero's receptor record identifier.
	//REMIND Receptor.ID
	ReceptorObjectId string `protobuf:"bytes,4,opt,name=receptor_object_id,json=receptorObjectId,proto3" json:"receptor_object_id,omitempty"`
}

func (x *JobResult) Reset() {
	*x = JobResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobResult) ProtoMessage() {}

func (x *JobResult) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobResult.ProtoReflect.Descriptor instead.
func (*JobResult) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{4}
}

func (x *JobResult) GetTracerId() string {
	if x != nil {
		return x.TracerId
	}
	return ""
}

func (x *JobResult) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *JobResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *JobResult) GetReceptorObjectId() string {
	if x != nil {
		return x.ReceptorObjectId
	}
	return ""
}

//*
//A service instance definition.
type Services_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Name of the service.  For example, "ECS".
	//@required
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	//*
	//Unique service ID.  For example, ECS's UUID.
	//@required
	InstanceId string `protobuf:"bytes,2,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *Services_Service) Reset() {
	*x = Services_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_receptor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Services_Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Services_Service) ProtoMessage() {}

func (x *Services_Service) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_receptor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Services_Service.ProtoReflect.Descriptor instead.
func (*Services_Service) Descriptor() ([]byte, []int) {
	return file_receptor_v1_receptor_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Services_Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Services_Service) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

var File_receptor_v1_receptor_proto protoreflect.FileDescriptor

var file_receptor_v1_receptor_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72,
	0x5f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe4, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x3e, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x8c, 0x02, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x63, 0x65,
	0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3b, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x70,
	0x74, 0x6f, 0x72, 0x4f, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74,
	0x6f, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65,
	0x70, 0x74, 0x6f, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x88,
	0x01, 0x0a, 0x09, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f,
	0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x32, 0xd4, 0x02, 0x0a, 0x08, 0x52, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x17, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74,
	0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x4f, 0x49,
	0x44, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x14, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x16, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x72,
	0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_receptor_v1_receptor_proto_rawDescOnce sync.Once
	file_receptor_v1_receptor_proto_rawDescData = file_receptor_v1_receptor_proto_rawDesc
)

func file_receptor_v1_receptor_proto_rawDescGZIP() []byte {
	file_receptor_v1_receptor_proto_rawDescOnce.Do(func() {
		file_receptor_v1_receptor_proto_rawDescData = protoimpl.X.CompressGZIP(file_receptor_v1_receptor_proto_rawDescData)
	})
	return file_receptor_v1_receptor_proto_rawDescData
}

var file_receptor_v1_receptor_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_receptor_v1_receptor_proto_goTypes = []interface{}{
	(*Services)(nil),               // 0: receptor_v1.Services
	(*Credential)(nil),             // 1: receptor_v1.Credential
	(*ReceptorOID)(nil),            // 2: receptor_v1.ReceptorOID
	(*ReceptorConfiguration)(nil),  // 3: receptor_v1.ReceptorConfiguration
	(*JobResult)(nil),              // 4: receptor_v1.JobResult
	(*Services_Service)(nil),       // 5: receptor_v1.Services.Service
	nil,                            // 6: receptor_v1.Credential.CredentialEntry
	(*Finding)(nil),                // 7: receptor_v1.Finding
	(*emptypb.Empty)(nil),          // 8: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil), // 9: google.protobuf.StringValue
}
var file_receptor_v1_receptor_proto_depIdxs = []int32{
	5, // 0: receptor_v1.Services.services:type_name -> receptor_v1.Services.Service
	6, // 1: receptor_v1.Credential.credential:type_name -> receptor_v1.Credential.CredentialEntry
	1, // 2: receptor_v1.Receptor.Verified:input_type -> receptor_v1.Credential
	2, // 3: receptor_v1.Receptor.GetConfiguration:input_type -> receptor_v1.ReceptorOID
	0, // 4: receptor_v1.Receptor.Discovered:input_type -> receptor_v1.Services
	7, // 5: receptor_v1.Receptor.Report:input_type -> receptor_v1.Finding
	4, // 6: receptor_v1.Receptor.Notify:input_type -> receptor_v1.JobResult
	8, // 7: receptor_v1.Receptor.Verified:output_type -> google.protobuf.Empty
	3, // 8: receptor_v1.Receptor.GetConfiguration:output_type -> receptor_v1.ReceptorConfiguration
	9, // 9: receptor_v1.Receptor.Discovered:output_type -> google.protobuf.StringValue
	9, // 10: receptor_v1.Receptor.Report:output_type -> google.protobuf.StringValue
	8, // 11: receptor_v1.Receptor.Notify:output_type -> google.protobuf.Empty
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_receptor_v1_receptor_proto_init() }
func file_receptor_v1_receptor_proto_init() {
	if File_receptor_v1_receptor_proto != nil {
		return
	}
	file_receptor_v1_finding_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_receptor_v1_receptor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Services); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceptorOID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceptorConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_receptor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Services_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_receptor_v1_receptor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_receptor_v1_receptor_proto_goTypes,
		DependencyIndexes: file_receptor_v1_receptor_proto_depIdxs,
		MessageInfos:      file_receptor_v1_receptor_proto_msgTypes,
	}.Build()
	File_receptor_v1_receptor_proto = out.File
	file_receptor_v1_receptor_proto_rawDesc = nil
	file_receptor_v1_receptor_proto_goTypes = nil
	file_receptor_v1_receptor_proto_depIdxs = nil
}
