// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: receptor_v1/struct.proto

package receptor_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
//A structured evidence defined in tabular form.  Each struct typically represent a service type (see Evidence
//message definition).  Each struct consists of rows of data.  Each row typically represent a service instance and
//its configurations.  A row  contains column name and column value pairs.  All rows in a struct must have the same
//column name-value pairs.
type Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Each row typically represents the configuration of a service instance.
	//@required
	Rows []*Struct_Row `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	//*
	//A map of row column name to display name pairs.
	//@required
	ColDisplayNames map[string]string `protobuf:"bytes,2,rep,name=col_display_names,json=colDisplayNames,proto3" json:"col_display_names,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//*
	//An ordered list of row column names.  The order defines how each column will be rendered by default.
	//@required
	ColDisplayOrder []string `protobuf:"bytes,3,rep,name=col_display_order,json=colDisplayOrder,proto3" json:"col_display_order,omitempty"`
}

func (x *Struct) Reset() {
	*x = Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_struct_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct) ProtoMessage() {}

func (x *Struct) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_struct_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct.ProtoReflect.Descriptor instead.
func (*Struct) Descriptor() ([]byte, []int) {
	return file_receptor_v1_struct_proto_rawDescGZIP(), []int{0}
}

func (x *Struct) GetRows() []*Struct_Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *Struct) GetColDisplayNames() map[string]string {
	if x != nil {
		return x.ColDisplayNames
	}
	return nil
}

func (x *Struct) GetColDisplayOrder() []string {
	if x != nil {
		return x.ColDisplayOrder
	}
	return nil
}

//*
//A row of structured data
type Struct_Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//A unique service ID relative to the struct.  A row ID typically represents a unique service ID.  The
	//service_id must be previously reported in the Services message.
	//@required
	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	//*
	//Columns of the row in column name to value pairs.  All rows in a struct must have the same column names and
	//corresponding value types.
	//@required
	Cols map[string]*Struct_Row_Value `protobuf:"bytes,2,rep,name=cols,proto3" json:"cols,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Struct_Row) Reset() {
	*x = Struct_Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_struct_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct_Row) ProtoMessage() {}

func (x *Struct_Row) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_struct_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct_Row.ProtoReflect.Descriptor instead.
func (*Struct_Row) Descriptor() ([]byte, []int) {
	return file_receptor_v1_struct_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Struct_Row) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *Struct_Row) GetCols() map[string]*Struct_Row_Value {
	if x != nil {
		return x.Cols
	}
	return nil
}

//*
//Column value types can be any protobuf scalar or google.proto.Timestamp.
//@required
type Struct_Row_Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ValueType:
	//	*Struct_Row_Value_DoubleValue
	//	*Struct_Row_Value_FloatValue
	//	*Struct_Row_Value_Int32Value
	//	*Struct_Row_Value_Int64Value
	//	*Struct_Row_Value_Uint32Value
	//	*Struct_Row_Value_Uint64Value
	//	*Struct_Row_Value_Sint32Value
	//	*Struct_Row_Value_Sint64Value
	//	*Struct_Row_Value_Fixed32Value
	//	*Struct_Row_Value_Fixed64Value
	//	*Struct_Row_Value_Sfixed32Value
	//	*Struct_Row_Value_Sfixed64Value
	//	*Struct_Row_Value_BoolValue
	//	*Struct_Row_Value_StringValue
	//	*Struct_Row_Value_TimestampValue
	ValueType isStruct_Row_Value_ValueType `protobuf_oneof:"value_type"`
}

func (x *Struct_Row_Value) Reset() {
	*x = Struct_Row_Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_struct_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct_Row_Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct_Row_Value) ProtoMessage() {}

func (x *Struct_Row_Value) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_struct_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct_Row_Value.ProtoReflect.Descriptor instead.
func (*Struct_Row_Value) Descriptor() ([]byte, []int) {
	return file_receptor_v1_struct_proto_rawDescGZIP(), []int{0, 1, 1}
}

func (m *Struct_Row_Value) GetValueType() isStruct_Row_Value_ValueType {
	if m != nil {
		return m.ValueType
	}
	return nil
}

func (x *Struct_Row_Value) GetDoubleValue() float64 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Struct_Row_Value) GetFloatValue() float32 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Struct_Row_Value) GetInt32Value() int32 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *Struct_Row_Value) GetInt64Value() int64 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *Struct_Row_Value) GetUint32Value() uint32 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *Struct_Row_Value) GetUint64Value() uint64 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *Struct_Row_Value) GetSint32Value() int32 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Sint32Value); ok {
		return x.Sint32Value
	}
	return 0
}

func (x *Struct_Row_Value) GetSint64Value() int64 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Sint64Value); ok {
		return x.Sint64Value
	}
	return 0
}

func (x *Struct_Row_Value) GetFixed32Value() uint32 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Fixed32Value); ok {
		return x.Fixed32Value
	}
	return 0
}

func (x *Struct_Row_Value) GetFixed64Value() uint64 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Fixed64Value); ok {
		return x.Fixed64Value
	}
	return 0
}

func (x *Struct_Row_Value) GetSfixed32Value() int32 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Sfixed32Value); ok {
		return x.Sfixed32Value
	}
	return 0
}

func (x *Struct_Row_Value) GetSfixed64Value() int64 {
	if x, ok := x.GetValueType().(*Struct_Row_Value_Sfixed64Value); ok {
		return x.Sfixed64Value
	}
	return 0
}

func (x *Struct_Row_Value) GetBoolValue() bool {
	if x, ok := x.GetValueType().(*Struct_Row_Value_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *Struct_Row_Value) GetStringValue() string {
	if x, ok := x.GetValueType().(*Struct_Row_Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Struct_Row_Value) GetTimestampValue() *timestamppb.Timestamp {
	if x, ok := x.GetValueType().(*Struct_Row_Value_TimestampValue); ok {
		return x.TimestampValue
	}
	return nil
}

type isStruct_Row_Value_ValueType interface {
	isStruct_Row_Value_ValueType()
}

type Struct_Row_Value_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type Struct_Row_Value_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type Struct_Row_Value_Int32Value struct {
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type Struct_Row_Value_Int64Value struct {
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type Struct_Row_Value_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type Struct_Row_Value_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type Struct_Row_Value_Sint32Value struct {
	Sint32Value int32 `protobuf:"zigzag32,7,opt,name=sint32_value,json=sint32Value,proto3,oneof"`
}

type Struct_Row_Value_Sint64Value struct {
	Sint64Value int64 `protobuf:"zigzag64,8,opt,name=sint64_value,json=sint64Value,proto3,oneof"`
}

type Struct_Row_Value_Fixed32Value struct {
	Fixed32Value uint32 `protobuf:"fixed32,9,opt,name=fixed32_value,json=fixed32Value,proto3,oneof"`
}

type Struct_Row_Value_Fixed64Value struct {
	Fixed64Value uint64 `protobuf:"fixed64,10,opt,name=fixed64_value,json=fixed64Value,proto3,oneof"`
}

type Struct_Row_Value_Sfixed32Value struct {
	Sfixed32Value int32 `protobuf:"fixed32,11,opt,name=sfixed32_value,json=sfixed32Value,proto3,oneof"`
}

type Struct_Row_Value_Sfixed64Value struct {
	Sfixed64Value int64 `protobuf:"fixed64,12,opt,name=sfixed64_value,json=sfixed64Value,proto3,oneof"`
}

type Struct_Row_Value_BoolValue struct {
	BoolValue bool `protobuf:"varint,13,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type Struct_Row_Value_StringValue struct {
	StringValue string `protobuf:"bytes,14,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Struct_Row_Value_TimestampValue struct {
	TimestampValue *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=timestamp_value,json=timestampValue,proto3,oneof"`
}

func (*Struct_Row_Value_DoubleValue) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_FloatValue) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Int32Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Int64Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Uint32Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Uint64Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Sint32Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Sint64Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Fixed32Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Fixed64Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Sfixed32Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_Sfixed64Value) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_BoolValue) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_StringValue) isStruct_Row_Value_ValueType() {}

func (*Struct_Row_Value_TimestampValue) isStruct_Row_Value_ValueType() {}

var File_receptor_v1_struct_proto protoreflect.FileDescriptor

var file_receptor_v1_struct_proto_rawDesc = []byte{
	0x0a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x12, 0x54, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x43, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x5f, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x1a, 0x42, 0x0a, 0x14, 0x43, 0x6f, 0x6c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x9a, 0x06, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x2e, 0x52, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x63, 0x6f, 0x6c, 0x73, 0x1a, 0x56, 0x0a, 0x09, 0x43, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x52, 0x6f, 0x77, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xe4, 0x04, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48,
	0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x48,
	0x00, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x25, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x27, 0x0a, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x10, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45,
	0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x6f, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_receptor_v1_struct_proto_rawDescOnce sync.Once
	file_receptor_v1_struct_proto_rawDescData = file_receptor_v1_struct_proto_rawDesc
)

func file_receptor_v1_struct_proto_rawDescGZIP() []byte {
	file_receptor_v1_struct_proto_rawDescOnce.Do(func() {
		file_receptor_v1_struct_proto_rawDescData = protoimpl.X.CompressGZIP(file_receptor_v1_struct_proto_rawDescData)
	})
	return file_receptor_v1_struct_proto_rawDescData
}

var file_receptor_v1_struct_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_receptor_v1_struct_proto_goTypes = []interface{}{
	(*Struct)(nil),                // 0: receptor_v1.Struct
	nil,                           // 1: receptor_v1.Struct.ColDisplayNamesEntry
	(*Struct_Row)(nil),            // 2: receptor_v1.Struct.Row
	nil,                           // 3: receptor_v1.Struct.Row.ColsEntry
	(*Struct_Row_Value)(nil),      // 4: receptor_v1.Struct.Row.Value
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_receptor_v1_struct_proto_depIdxs = []int32{
	2, // 0: receptor_v1.Struct.rows:type_name -> receptor_v1.Struct.Row
	1, // 1: receptor_v1.Struct.col_display_names:type_name -> receptor_v1.Struct.ColDisplayNamesEntry
	3, // 2: receptor_v1.Struct.Row.cols:type_name -> receptor_v1.Struct.Row.ColsEntry
	4, // 3: receptor_v1.Struct.Row.ColsEntry.value:type_name -> receptor_v1.Struct.Row.Value
	5, // 4: receptor_v1.Struct.Row.Value.timestamp_value:type_name -> google.protobuf.Timestamp
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_receptor_v1_struct_proto_init() }
func file_receptor_v1_struct_proto_init() {
	if File_receptor_v1_struct_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_receptor_v1_struct_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_struct_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Struct_Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_struct_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Struct_Row_Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_receptor_v1_struct_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Struct_Row_Value_DoubleValue)(nil),
		(*Struct_Row_Value_FloatValue)(nil),
		(*Struct_Row_Value_Int32Value)(nil),
		(*Struct_Row_Value_Int64Value)(nil),
		(*Struct_Row_Value_Uint32Value)(nil),
		(*Struct_Row_Value_Uint64Value)(nil),
		(*Struct_Row_Value_Sint32Value)(nil),
		(*Struct_Row_Value_Sint64Value)(nil),
		(*Struct_Row_Value_Fixed32Value)(nil),
		(*Struct_Row_Value_Fixed64Value)(nil),
		(*Struct_Row_Value_Sfixed32Value)(nil),
		(*Struct_Row_Value_Sfixed64Value)(nil),
		(*Struct_Row_Value_BoolValue)(nil),
		(*Struct_Row_Value_StringValue)(nil),
		(*Struct_Row_Value_TimestampValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_receptor_v1_struct_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_receptor_v1_struct_proto_goTypes,
		DependencyIndexes: file_receptor_v1_struct_proto_depIdxs,
		MessageInfos:      file_receptor_v1_struct_proto_msgTypes,
	}.Build()
	File_receptor_v1_struct_proto = out.File
	file_receptor_v1_struct_proto_rawDesc = nil
	file_receptor_v1_struct_proto_goTypes = nil
	file_receptor_v1_struct_proto_depIdxs = nil
}
