// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.
// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: receptor_v1/receptor.proto

package receptor_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReceptorClient is the client API for Receptor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReceptorClient interface {
	//*
	//Report whether the provided credential is a valid service provider credential for purpose of discovering services
	//and reporting findings.  This rpc call is typically made as callback by a receptor to trustero from a check
	//credential receptor request.
	Verified(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//*
	//Get the receptor configuration and service provider credential using the provided receptor record identifier.  This
	//rpc call is typically made as a callback by a receptor prior to making a report findings or discover services
	//receptor request.
	GetConfiguration(ctx context.Context, in *ReceptorOID, opts ...grpc.CallOption) (*ReceptorConfiguration, error)
	//*
	//Report known services.  A receptor or a Trustero client application reports its known services on demand.  This
	//call returns a string value service listing ID or an error specifying why Trustero failed to process the service
	//listing.
	Discovered(ctx context.Context, in *Services, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	//*
	//Report a finding.  A receptor or a Trustero client application reports its findings on a periodic basis.  This
	//call returns a string value collection ID or an error specifying why Trustero failed to process the finding.
	Report(ctx context.Context, in *Finding, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	//*
	//Notify Trustero a long running report finding or discover services receptor request has completed.  JobResult
	//contains information about the receptor request and it's corresponding result.  Information such as the
	//JobResult.receptor_object_id are passed to the receptor as part of the request.
	Notify(ctx context.Context, in *JobResult, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type receptorClient struct {
	cc grpc.ClientConnInterface
}

func NewReceptorClient(cc grpc.ClientConnInterface) ReceptorClient {
	return &receptorClient{cc}
}

func (c *receptorClient) Verified(ctx context.Context, in *Credential, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/receptor_v1.Receptor/Verified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receptorClient) GetConfiguration(ctx context.Context, in *ReceptorOID, opts ...grpc.CallOption) (*ReceptorConfiguration, error) {
	out := new(ReceptorConfiguration)
	err := c.cc.Invoke(ctx, "/receptor_v1.Receptor/GetConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receptorClient) Discovered(ctx context.Context, in *Services, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/receptor_v1.Receptor/Discovered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receptorClient) Report(ctx context.Context, in *Finding, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/receptor_v1.Receptor/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receptorClient) Notify(ctx context.Context, in *JobResult, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/receptor_v1.Receptor/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceptorServer is the server API for Receptor service.
// All implementations should embed UnimplementedReceptorServer
// for forward compatibility
type ReceptorServer interface {
	//*
	//Report whether the provided credential is a valid service provider credential for purpose of discovering services
	//and reporting findings.  This rpc call is typically made as callback by a receptor to trustero from a check
	//credential receptor request.
	Verified(context.Context, *Credential) (*emptypb.Empty, error)
	//*
	//Get the receptor configuration and service provider credential using the provided receptor record identifier.  This
	//rpc call is typically made as a callback by a receptor prior to making a report findings or discover services
	//receptor request.
	GetConfiguration(context.Context, *ReceptorOID) (*ReceptorConfiguration, error)
	//*
	//Report known services.  A receptor or a Trustero client application reports its known services on demand.  This
	//call returns a string value service listing ID or an error specifying why Trustero failed to process the service
	//listing.
	Discovered(context.Context, *Services) (*wrapperspb.StringValue, error)
	//*
	//Report a finding.  A receptor or a Trustero client application reports its findings on a periodic basis.  This
	//call returns a string value collection ID or an error specifying why Trustero failed to process the finding.
	Report(context.Context, *Finding) (*wrapperspb.StringValue, error)
	//*
	//Notify Trustero a long running report finding or discover services receptor request has completed.  JobResult
	//contains information about the receptor request and it's corresponding result.  Information such as the
	//JobResult.receptor_object_id are passed to the receptor as part of the request.
	Notify(context.Context, *JobResult) (*emptypb.Empty, error)
}

// UnimplementedReceptorServer should be embedded to have forward compatible implementations.
type UnimplementedReceptorServer struct {
}

func (UnimplementedReceptorServer) Verified(context.Context, *Credential) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verified not implemented")
}
func (UnimplementedReceptorServer) GetConfiguration(context.Context, *ReceptorOID) (*ReceptorConfiguration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedReceptorServer) Discovered(context.Context, *Services) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discovered not implemented")
}
func (UnimplementedReceptorServer) Report(context.Context, *Finding) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedReceptorServer) Notify(context.Context, *JobResult) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}

// UnsafeReceptorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceptorServer will
// result in compilation errors.
type UnsafeReceptorServer interface {
	mustEmbedUnimplementedReceptorServer()
}

func RegisterReceptorServer(s grpc.ServiceRegistrar, srv ReceptorServer) {
	s.RegisterService(&Receptor_ServiceDesc, srv)
}

func _Receptor_Verified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credential)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceptorServer).Verified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receptor_v1.Receptor/Verified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceptorServer).Verified(ctx, req.(*Credential))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receptor_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceptorOID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceptorServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receptor_v1.Receptor/GetConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceptorServer).GetConfiguration(ctx, req.(*ReceptorOID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receptor_Discovered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Services)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceptorServer).Discovered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receptor_v1.Receptor/Discovered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceptorServer).Discovered(ctx, req.(*Services))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receptor_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Finding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceptorServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receptor_v1.Receptor/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceptorServer).Report(ctx, req.(*Finding))
	}
	return interceptor(ctx, in, info, handler)
}

func _Receptor_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceptorServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/receptor_v1.Receptor/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceptorServer).Notify(ctx, req.(*JobResult))
	}
	return interceptor(ctx, in, info, handler)
}

// Receptor_ServiceDesc is the grpc.ServiceDesc for Receptor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Receptor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "receptor_v1.Receptor",
	HandlerType: (*ReceptorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Verified",
			Handler:    _Receptor_Verified_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _Receptor_GetConfiguration_Handler,
		},
		{
			MethodName: "Discovered",
			Handler:    _Receptor_Discovered_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _Receptor_Report_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Receptor_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "receptor_v1/receptor.proto",
}
