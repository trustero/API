// This file is subject to the terms and conditions defined in
// file 'LICENSE.txt', which is part of this source code package.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: receptor_v1/evidence.proto

package receptor_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
//An evidence is a unstructured or structured document that represent the how a service is being used within a
//service provider account.  For example, the configuration of an S3 bucket in AWS.
type Evidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	//Human readable English string that identifies this evidence.  It's important the caption is stable for all
	//scans of the same evidence type.
	Caption string `protobuf:"bytes,1,opt,name=caption,proto3" json:"caption,omitempty"`
	//*
	//Human readable English string describing the content of this evidence.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	//*
	//The name of service this evidence was collected from.  For example, "S3".  The service name must be one
	//of the service types reported in Services struct (See the message Service definition).
	ServiceName string             `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	Sources     []*Evidence_Source `protobuf:"bytes,4,rep,name=sources,proto3" json:"sources,omitempty"`
	//*
	//The evidence can be an unstructured (Document) or structured (Struct) type.
	//
	// Types that are assignable to EvidenceType:
	//	*Evidence_Doc
	//	*Evidence_Struct
	EvidenceType isEvidence_EvidenceType `protobuf_oneof:"evidence_type"`
}

func (x *Evidence) Reset() {
	*x = Evidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_evidence_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Evidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evidence) ProtoMessage() {}

func (x *Evidence) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_evidence_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evidence.ProtoReflect.Descriptor instead.
func (*Evidence) Descriptor() ([]byte, []int) {
	return file_receptor_v1_evidence_proto_rawDescGZIP(), []int{0}
}

func (x *Evidence) GetCaption() string {
	if x != nil {
		return x.Caption
	}
	return ""
}

func (x *Evidence) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Evidence) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Evidence) GetSources() []*Evidence_Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (m *Evidence) GetEvidenceType() isEvidence_EvidenceType {
	if m != nil {
		return m.EvidenceType
	}
	return nil
}

func (x *Evidence) GetDoc() *Document {
	if x, ok := x.GetEvidenceType().(*Evidence_Doc); ok {
		return x.Doc
	}
	return nil
}

func (x *Evidence) GetStruct() *Struct {
	if x, ok := x.GetEvidenceType().(*Evidence_Struct); ok {
		return x.Struct
	}
	return nil
}

type isEvidence_EvidenceType interface {
	isEvidence_EvidenceType()
}

type Evidence_Doc struct {
	//*
	//An unstructured evidence.
	Doc *Document `protobuf:"bytes,6,opt,name=doc,proto3,oneof"`
}

type Evidence_Struct struct {
	//*
	//A structured evidence
	Struct *Struct `protobuf:"bytes,7,opt,name=struct,proto3,oneof"`
}

func (*Evidence_Doc) isEvidence_EvidenceType() {}

func (*Evidence_Struct) isEvidence_EvidenceType() {}

type Evidence_Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RawApiRequest string `protobuf:"bytes,1,opt,name=raw_api_request,json=rawApiRequest,proto3" json:"raw_api_request,omitempty"`
	//*
	//The raw API response used to generate this evidence.  The raw API request and response is used to prove to
	//examiners this evidence correlates to real service instance configuration.
	RawApiResponse string `protobuf:"bytes,2,opt,name=raw_api_response,json=rawApiResponse,proto3" json:"raw_api_response,omitempty"`
}

func (x *Evidence_Source) Reset() {
	*x = Evidence_Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_receptor_v1_evidence_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Evidence_Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evidence_Source) ProtoMessage() {}

func (x *Evidence_Source) ProtoReflect() protoreflect.Message {
	mi := &file_receptor_v1_evidence_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evidence_Source.ProtoReflect.Descriptor instead.
func (*Evidence_Source) Descriptor() ([]byte, []int) {
	return file_receptor_v1_evidence_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Evidence_Source) GetRawApiRequest() string {
	if x != nil {
		return x.RawApiRequest
	}
	return ""
}

func (x *Evidence_Source) GetRawApiResponse() string {
	if x != nil {
		return x.RawApiResponse
	}
	return ""
}

var File_receptor_v1_evidence_proto protoreflect.FileDescriptor

var file_receptor_v1_evidence_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2f, 0x65, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x72, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x1a, 0x1a, 0x72, 0x65, 0x63, 0x65, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe8, 0x02, 0x0a, 0x08, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72,
	0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x03, 0x64, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x03, 0x64, 0x6f, 0x63, 0x12, 0x2d,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x5a, 0x0a,
	0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x61, 0x77, 0x5f, 0x61,
	0x70, 0x69, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x61, 0x77, 0x41, 0x70, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x61, 0x77, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x65, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f,
	0x72, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_receptor_v1_evidence_proto_rawDescOnce sync.Once
	file_receptor_v1_evidence_proto_rawDescData = file_receptor_v1_evidence_proto_rawDesc
)

func file_receptor_v1_evidence_proto_rawDescGZIP() []byte {
	file_receptor_v1_evidence_proto_rawDescOnce.Do(func() {
		file_receptor_v1_evidence_proto_rawDescData = protoimpl.X.CompressGZIP(file_receptor_v1_evidence_proto_rawDescData)
	})
	return file_receptor_v1_evidence_proto_rawDescData
}

var file_receptor_v1_evidence_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_receptor_v1_evidence_proto_goTypes = []interface{}{
	(*Evidence)(nil),        // 0: receptor_v1.Evidence
	(*Evidence_Source)(nil), // 1: receptor_v1.Evidence.Source
	(*Document)(nil),        // 2: receptor_v1.Document
	(*Struct)(nil),          // 3: receptor_v1.Struct
}
var file_receptor_v1_evidence_proto_depIdxs = []int32{
	1, // 0: receptor_v1.Evidence.sources:type_name -> receptor_v1.Evidence.Source
	2, // 1: receptor_v1.Evidence.doc:type_name -> receptor_v1.Document
	3, // 2: receptor_v1.Evidence.struct:type_name -> receptor_v1.Struct
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_receptor_v1_evidence_proto_init() }
func file_receptor_v1_evidence_proto_init() {
	if File_receptor_v1_evidence_proto != nil {
		return
	}
	file_receptor_v1_document_proto_init()
	file_receptor_v1_struct_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_receptor_v1_evidence_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Evidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_receptor_v1_evidence_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Evidence_Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_receptor_v1_evidence_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Evidence_Doc)(nil),
		(*Evidence_Struct)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_receptor_v1_evidence_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_receptor_v1_evidence_proto_goTypes,
		DependencyIndexes: file_receptor_v1_evidence_proto_depIdxs,
		MessageInfos:      file_receptor_v1_evidence_proto_msgTypes,
	}.Build()
	File_receptor_v1_evidence_proto = out.File
	file_receptor_v1_evidence_proto_rawDesc = nil
	file_receptor_v1_evidence_proto_goTypes = nil
	file_receptor_v1_evidence_proto_depIdxs = nil
}
